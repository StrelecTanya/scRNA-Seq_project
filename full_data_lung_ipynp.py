# -*- coding: utf-8 -*-
"""full_data_lung.ipynp

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1nfmSE59LX9uEbS76I-KcIhjO9SNxoTLb

# Предобработка данных
"""

!pip install scanpy[leiden] harmonypy symphonypy bbknn

"""Загружаем датасет - scRNA-Seq легочной ткани, отобранные от 2х новорожденных девочек"""

!wget https://datasets.cellxgene.cziscience.com/f7be56a5-55fc-4beb-8d5d-ffec21c11906.h5ad -O dataset.h5ad

"""Импортируем все необходимые библиотеки для обработки данных"""

import numpy as np
import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt

import scanpy as sc
import scanpy.external as sce

adata = sc.read_h5ad("dataset.h5ad")

"""В готовом файле, в adata.X уже предобработанные данные (судя по всему все шаги до шкалирования и отбора HVG). Для более адекватного результата буду работать с сырыми данными и сама их предобработаю."""

# Создание нового объекта adata_raw с сырыми данными
adata_raw = sc.AnnData(adata.raw.X, obs=adata.obs, var=adata.raw.var)

adata_raw.var["mt"] = adata_raw.var.feature_name.str.startswith("MT-")
sc.pp.calculate_qc_metrics(
    adata_raw,
    qc_vars=["mt"],
    percent_top=None,
    inplace=True,
    log1p=False,
)

fig, axes = plt.subplots(ncols=3, figsize=(12, 4))

sns.histplot(adata_raw.obs.total_counts, log_scale=True, alpha=1, bins=50, edgecolor="black", ax=axes[0])
axes[0].set_ylabel("")
axes[0].set_xlabel("nUMIs")
axes[0].grid(alpha=0.3)

sns.histplot(adata_raw.obs.n_genes_by_counts, log_scale=True, alpha=1, bins=50, edgecolor="black", ax=axes[1])
axes[1].set_ylabel("")
axes[1].set_xlabel("nGenes")
axes[1].grid(alpha=0.3)

sns.histplot(adata_raw.obs.pct_counts_mt, alpha=1, edgecolor="black", ax=axes[2])
axes[2].set_ylabel("")
axes[2].set_xlabel("% mt counts")
axes[2].grid(alpha=0.3)

fig.tight_layout()

adata_raw = adata_raw[adata_raw.obs.n_genes_by_counts >= 700]

sc.pp.scrublet(adata_raw, batch_key="donor_id")

adata_raw = adata_raw[adata_raw.obs.doublet_score <= 0.2].copy()

sc.pp.normalize_total(adata_raw, target_sum=1e4)
sc.pp.log1p(adata_raw)

sc.pp.highly_variable_genes(adata_raw, batch_key="donor_id", n_top_genes=3000)

adata_raw.raw = adata_raw
adata = adata_raw[:, adata_raw.var.highly_variable]

#Теперь можем стандартизировать данные и сделать PCA
sc.pp.scale(adata, max_value=10)
sc.pp.pca(adata, n_comps=30)

"""Теперь можем отобрать батчи"""

#Визуализация без батч-коррекции
# Создаем копию данных
adata_nocorr = adata.copy()

# Предобработка данных
sc.pp.neighbors(adata_nocorr)
sc.tl.umap(adata_nocorr)

# Создание подграфиков (subplots)
fig, axes = plt.subplots(1, 3, figsize=(18, 6))  # Увеличиваем ширину фигуры

# Первый график - окрашивание по донору (donor_id)
sc.pl.umap(adata_nocorr, color='donor_id', ax=axes[0], show=False)
axes[0].set_title("UMAP по донору (donor_id)")

# Кластеризация и второй график - окрашивание по кластерам (leiden)
sc.tl.leiden(adata_nocorr, resolution=0.1)
sc.pl.umap(adata_nocorr, color="leiden", ax=axes[1], show=False)
axes[1].set_title("UMAP по кластерам (leiden)")

# Третий график - окрашивание по типам клеток (cell_type)
sc.pl.umap(adata_nocorr, color="cell_type", ax=axes[2], show=False)
axes[2].set_title("UMAP по типам клеток (cell_type)")

# Отображение графиков
plt.tight_layout()
plt.show()